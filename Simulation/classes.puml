@startuml classes
set namespaceSeparator none
class "Aerodynamics" as simulation.Aerodynamics {
  para_drag : float
  para_surface : float
  rocket_drag : float
  rocket_surface : float
}
class "DataAnalysis" as simulation.DataAnalysis {
  simulation
  export_trajectory(filename)
  graph_trajectory(filename)
  simulation_report()
}
class "Motor" as simulation.Motor {
  casing_mass
  mass
  propellant : interp1d
  propellant_mass
  thrust : interp1d
  thrust_force
  thrust_time
  get_propellant_mass(t: float) -> float
  get_thrust(t: float) -> float
}
class "Rocket" as simulation.Rocket {
  aerodynamics
  gisement : float
  m
  motor
  open_para : float
  rocket_mass : float
  site : float
  Mass(t: float) -> float
  Thrust(t: float) -> float
}
class "SimulationEuler" as simulation.SimulationEuler {
  euler_angles : ndarray
  fps : int
  h : float
  integrator : str
  phi
  rocket
  simulation_duration : float
  simulation_steps
  theta
  time : int
  time_index : int
  trajectory : ndarray
  velocity : ndarray
  Euler_SingleStep(velocity, position, h)
  RK4_SingleStep(accel, velocity, t, h)
  RK4_SingleStep_SecondOrder(accel, velocity, position, t, h)
  acceleration(t, velocity)
  run_simulation()
  updateRotation(i, theta, phi)
}
class "SimulationQuaternion" as simulation.SimulationQuaternion {
  fps : int
  h : float
  q : ndarray
  rocket
  simulation_duration : float
  simulation_steps
  time : int
  time_index : int
  trajectory : ndarray
  velocity : ndarray
  wi : ndarray
  Euler_SingleStep(velocity, position, h)
  RK4_SingleStep(accel, velocity, t, h)
  acceleration(t, velocity)
  run_simulation()
  self_acceleration(t, velocity)
  update_rotation(eq, qi, wi, h)
}
simulation.Aerodynamics --o simulation.Rocket : aerodynamics
simulation.Motor --o simulation.Rocket : motor
simulation.Rocket --o simulation.SimulationEuler : rocket
simulation.Rocket --o simulation.SimulationQuaternion : rocket
@enduml
